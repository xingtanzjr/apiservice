/*


Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1 "multitenancy.metricsadvisor.ai/apiservice/apis/multitenancy/v1"
)

// ApiServiceLister helps list ApiServices.
// All objects returned here must be treated as read-only.
type ApiServiceLister interface {
	// List lists all ApiServices in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ApiService, err error)
	// ApiServices returns an object that can list and get ApiServices.
	ApiServices(namespace string) ApiServiceNamespaceLister
	ApiServiceListerExpansion
}

// apiServiceLister implements the ApiServiceLister interface.
type apiServiceLister struct {
	indexer cache.Indexer
}

// NewApiServiceLister returns a new ApiServiceLister.
func NewApiServiceLister(indexer cache.Indexer) ApiServiceLister {
	return &apiServiceLister{indexer: indexer}
}

// List lists all ApiServices in the indexer.
func (s *apiServiceLister) List(selector labels.Selector) (ret []*v1.ApiService, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ApiService))
	})
	return ret, err
}

// ApiServices returns an object that can list and get ApiServices.
func (s *apiServiceLister) ApiServices(namespace string) ApiServiceNamespaceLister {
	return apiServiceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ApiServiceNamespaceLister helps list and get ApiServices.
// All objects returned here must be treated as read-only.
type ApiServiceNamespaceLister interface {
	// List lists all ApiServices in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ApiService, err error)
	// Get retrieves the ApiService from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.ApiService, error)
	ApiServiceNamespaceListerExpansion
}

// apiServiceNamespaceLister implements the ApiServiceNamespaceLister
// interface.
type apiServiceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ApiServices in the indexer for a given namespace.
func (s apiServiceNamespaceLister) List(selector labels.Selector) (ret []*v1.ApiService, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ApiService))
	})
	return ret, err
}

// Get retrieves the ApiService from the indexer for a given namespace and name.
func (s apiServiceNamespaceLister) Get(name string) (*v1.ApiService, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("apiservice"), name)
	}
	return obj.(*v1.ApiService), nil
}
